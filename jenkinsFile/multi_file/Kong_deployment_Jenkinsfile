pipeline{   
    parameters {
            string defaultValue: 'master', description: 'Enter Your Branch', name: 'BRANCH'
            choice choices: ['default', 'sandbox','production'], description: "Choose Workspace From Dropdown- ", name: 'WORKSPACE'
        }
	environment {
        state = ""
    }	
    agent any
    stages {
        //Set Some Env Vars
        stage('Set Some Env Vars') {
            steps {
			  script {
			     env.folder_path = "apiConfig"
			  }
            }
        }
		//Print No of files
        stage('Print No of files') {
            steps {
			    sh '''file_count=$(ls -1 "$folder_path" | wc -l)
                     echo $file_count'''
            }
        }
		//Testing
        stage('Testing') {
            steps {
               
			   sh '''for file_path in "$folder_path"/*
						do
						    state="$state ./$file_path"
							
						done'''
            }
        }
        //Lint the OpenAPI spec using Insomnia CLI
        stage('Lint OpenAPI Spec') {
            steps {
               
			   sh '''for file_path in "$folder_path"/*
						do
							inso lint spec ./$file_path
						done'''
            }
        }
        //Generate Kong configuration in declarative format
        stage('Generate Kong configuration in declarative format') {
            steps {
                sh '''for file_path in "$folder_path"/*
                        do
                            inso generate config ./$file_path --type declarative -o ./$file_path
                        done'''
            }
        }

        //Validate the Kong configuration using deck CLI
        stage('Validate the Kong configuration using deck CLI') {
            steps {
                sh '''for file_path in "$folder_path"/*
					do
						deck validate -s ./$file_path
					done'''
            }
        }
        //Convert the Kong configuration to version 3.x using deck CLI
        stage('Convert kong declarative') {
            steps {
                sh '''for file_path in "$folder_path"/*
						do
						yes | deck convert --from kong-gateway-2.x --to kong-gateway-3.x --input-file ./$file_path --output-file ./$file_path
						done'''
            }
        } 
        //backup the kong declartive config file
        stage('Deploy to Kong') {
            steps {
                withCredentials([string(credentialsId: 'kong_admin_api_host', variable: 'kong_admin_api_host')]) {
                    sh 'deck dump -o kong-backup.yaml  --kong-addr $kong_admin_api_host  --workspace $WORKSPACE --tls-skip-verify'           
                }
            }
        }
        //Deploy to Kong
        stage('Deploy to Kong') {
            steps {
                withCredentials([string(credentialsId: 'kong_admin_api_host', variable: 'kong_admin_api_host')]) {
                   sh '''for file_path in "$folder_path"/*
                            do
                                deck sync -s ./kong-backup.yaml -s ./$file_path --kong-addr $kong_admin_api_host --workspace $WORKSPACE --tls-skip-verify
                            done'''               
                }
            }
        }
     }
   post {
        always {
           deleteDir()
       }
    }
}